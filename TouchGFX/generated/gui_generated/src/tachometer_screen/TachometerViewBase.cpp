/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/tachometer_screen/TachometerViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

TachometerViewBase::TachometerViewBase()
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
    
    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    RpmProgress.setXY(1, 31);
    RpmProgress.setProgressIndicatorPosition(0, 13, 476, 109);
    RpmProgress.setRange(0, 800);
    RpmProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    RpmProgress.setBackground(touchgfx::Bitmap(BITMAP_TACHOMETER_BACKGROUND_ID));
    RpmProgress.setBitmap(BITMAP_TACHOMETER_PROGRESS_ID);
    RpmProgress.setValue(623);
    RpmProgress.setAnchorAtZero(true);
    add(RpmProgress);

    RpmBar.setXY(349, 33);
    RpmBar.setBitmap(touchgfx::Bitmap(BITMAP_RPM_MOVING_BAR_ID));
    add(RpmBar);

    RpmVal.setXY(416, 47);
    RpmVal.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    RpmVal.setLinespacing(0);
    Unicode::snprintf(RpmValBuffer, RPMVAL_SIZE, "%s", touchgfx::TypedText(T_RPMVALUE).getText());
    RpmVal.setWildcard(RpmValBuffer);
    RpmVal.resizeToCurrentText();
    RpmVal.setTypedText(touchgfx::TypedText(T_RPMVAL));
    add(RpmVal);

    SocProgress.setXY(1, 219);
    SocProgress.setProgressIndicatorPosition(6, 4, 449, 41);
    SocProgress.setRange(0, 100);
    SocProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    SocProgress.setBackground(touchgfx::Bitmap(BITMAP_SOCBACKGROUND_ID));
    SocProgress.setBitmap(BITMAP_SOC_PROGRESS_ID);
    SocProgress.setValue(76);
    SocProgress.setAnchorAtZero(true);
    add(SocProgress);

    SocBar.setXY(327, 219);
    SocBar.setBitmap(touchgfx::Bitmap(BITMAP_MOVING_BAR_ID));
    add(SocBar);

    SocVal.setPosition(446, 200, 30, 20);
    SocVal.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    SocVal.setLinespacing(0);
    Unicode::snprintf(SocValBuffer, SOCVAL_SIZE, "%s", touchgfx::TypedText(T_SOCVALUE).getText());
    SocVal.setWildcard(SocValBuffer);
    SocVal.setTypedText(touchgfx::TypedText(T_SOCVAL));
    add(SocVal);

    DistanceVal.setXY(2, 199);
    DistanceVal.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    DistanceVal.setLinespacing(0);
    Unicode::snprintf(DistanceValBuffer, DISTANCEVAL_SIZE, "%s", touchgfx::TypedText(T_DISTANCEVALUE).getText());
    DistanceVal.setWildcard(DistanceValBuffer);
    DistanceVal.resizeToCurrentText();
    DistanceVal.setTypedText(touchgfx::TypedText(T_DISTANCEVAL));
    add(DistanceVal);

    Pack2Volt.setXY(425, 167);
    Pack2Volt.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Pack2Volt.setLinespacing(0);
    Unicode::snprintf(Pack2VoltBuffer, PACK2VOLT_SIZE, "%s", touchgfx::TypedText(T_PACK2VOLTAGE).getText());
    Pack2Volt.setWildcard(Pack2VoltBuffer);
    Pack2Volt.resizeToCurrentText();
    Pack2Volt.setTypedText(touchgfx::TypedText(T_PACK2VOLT));
    add(Pack2Volt);

    Pack2Temp.setXY(419, 144);
    Pack2Temp.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Pack2Temp.setLinespacing(0);
    Unicode::snprintf(Pack2TempBuffer, PACK2TEMP_SIZE, "%s", touchgfx::TypedText(T_PACK2TEMPVAL).getText());
    Pack2Temp.setWildcard(Pack2TempBuffer);
    Pack2Temp.resizeToCurrentText();
    Pack2Temp.setTypedText(touchgfx::TypedText(T_PACK2TEMPID));
    add(Pack2Temp);

    Pack2Icon.setXY(395, 158);
    Pack2Icon.setBitmap(touchgfx::Bitmap(BITMAP_BATTERY_PACK_1_ID));
    add(Pack2Icon);

    Pack2.setXY(398, 162);
    Pack2.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Pack2.setLinespacing(0);
    Pack2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_I1WL));
    add(Pack2);

    Pack1Volt.setXY(425, 112);
    Pack1Volt.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Pack1Volt.setLinespacing(0);
    Unicode::snprintf(Pack1VoltBuffer, PACK1VOLT_SIZE, "%s", touchgfx::TypedText(T_PACK1VOLTAGE).getText());
    Pack1Volt.setWildcard(Pack1VoltBuffer);
    Pack1Volt.resizeToCurrentText();
    Pack1Volt.setTypedText(touchgfx::TypedText(T_PACK1VOLT));
    add(Pack1Volt);

    Pack1Temp.setXY(419, 89);
    Pack1Temp.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Pack1Temp.setLinespacing(0);
    Unicode::snprintf(Pack1TempBuffer, PACK1TEMP_SIZE, "%s", touchgfx::TypedText(T_PACK1TEMPERATURE).getText());
    Pack1Temp.setWildcard(Pack1TempBuffer);
    Pack1Temp.resizeToCurrentText();
    Pack1Temp.setTypedText(touchgfx::TypedText(T_PACK1TEMP));
    add(Pack1Temp);

    Pack1Icon.setXY(395, 103);
    Pack1Icon.setBitmap(touchgfx::Bitmap(BITMAP_BATTERY_PACK_1_ID));
    add(Pack1Icon);

    Pack1.setXY(399, 107);
    Pack1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Pack1.setLinespacing(0);
    Pack1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_WCPR));
    add(Pack1);

    DigitalClockBackground.setXY(192, 0);
    DigitalClockBackground.setBitmap(touchgfx::Bitmap(BITMAP_FRAME_ID));
    add(DigitalClockBackground);

    DigitalClock.setPosition(205, 7, 72, 15);
    DigitalClock.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    DigitalClock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_B6DP));
    DigitalClock.displayLeadingZeroForHourIndicator(true);
    DigitalClock.setDisplayMode(touchgfx::DigitalClock::DISPLAY_12_HOUR);
    DigitalClock.setTime12Hour(8, 10, 0, true);
    add(DigitalClock);

    TargetBackground.setXY(2, 161);
    TargetBackground.setBitmap(touchgfx::Bitmap(BITMAP_TARGET_BACKGROUND_ID));
    add(TargetBackground);

    TargetSpeed.setXY(2, 177);
    TargetSpeed.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    TargetSpeed.setLinespacing(0);
    Unicode::snprintf(TargetSpeedBuffer, TARGETSPEED_SIZE, "%s", touchgfx::TypedText(T_TARGETSPEEDVAL).getText());
    TargetSpeed.setWildcard(TargetSpeedBuffer);
    TargetSpeed.resizeToCurrentText();
    TargetSpeed.setTypedText(touchgfx::TypedText(T_TARGETSPEED));
    add(TargetSpeed);

    TargetSoC.setXY(55, 177);
    TargetSoC.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    TargetSoC.setLinespacing(0);
    Unicode::snprintf(TargetSoCBuffer, TARGETSOC_SIZE, "%s", touchgfx::TypedText(T_TARGETSOCVAL).getText());
    TargetSoC.setWildcard(TargetSoCBuffer);
    TargetSoC.resizeToCurrentText();
    TargetSoC.setTypedText(touchgfx::TypedText(T_TARGETSOC));
    add(TargetSoC);

    MotorBackground.setXY(1, 7);
    MotorBackground.setBitmap(touchgfx::Bitmap(BITMAP_CURRENT_PLACEHOLDER_ID));
    add(MotorBackground);

    MotorVal.setXY(38, 10);
    MotorVal.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    MotorVal.setLinespacing(0);
    Unicode::snprintf(MotorValBuffer, MOTORVAL_SIZE, "%s", touchgfx::TypedText(T_MOTORVALUE).getText());
    MotorVal.setWildcard(MotorValBuffer);
    MotorVal.resizeToCurrentText();
    MotorVal.setTypedText(touchgfx::TypedText(T_MOTORVAL));
    add(MotorVal);

    MotorProgress.setXY(5, 32);
    MotorProgress.setProgressIndicatorPosition(0, 0, 86, 2);
    MotorProgress.setRange(0, 42);
    MotorProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    MotorProgress.setBackground(touchgfx::Bitmap(BITMAP_CURRENT_BACKGROUND_ID));
    MotorProgress.setBitmap(BITMAP_CURRENT_PROGRESS_ID);
    MotorProgress.setValue(25);
    MotorProgress.setAnchorAtZero(true);
    add(MotorProgress);

    SpeedVal.setPosition(141, 78, 197, 101);
    SpeedVal.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    SpeedVal.setLinespacing(0);
    Unicode::snprintf(SpeedValBuffer, SPEEDVAL_SIZE, "%s", touchgfx::TypedText(T_SPEEDVALUE).getText());
    SpeedVal.setWildcard(SpeedValBuffer);
    SpeedVal.setTypedText(touchgfx::TypedText(T_SPEEDVAL));
    add(SpeedVal);

    MPH.setXY(215, 84);
    MPH.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    MPH.setLinespacing(0);
    MPH.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MWJB));
    MPH.setAlpha(75);
    add(MPH);

    PackDivider.setXY(316, 139);
    PackDivider.setBitmap(touchgfx::Bitmap(BITMAP_BATTERY_BARRIER_ID));
    add(PackDivider);

    OvertakingBackground.setPosition(410, 11, 65, 19);
    OvertakingBackground.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    OvertakingBackground.setBorderColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
    OvertakingBackground.setBorderSize(1);
    add(OvertakingBackground);

    Overtaking.setXY(413, 14);
    Overtaking.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    Overtaking.setLinespacing(0);
    Overtaking.setTypedText(touchgfx::TypedText(T_OVERTAKING));
    add(Overtaking);

    TelemetryBackground.setPosition(64, 97, 78, 78);
    TelemetryBackground.setCenter(40, 40);
    TelemetryBackground.setRadius(20);
    TelemetryBackground.setLineWidth(2);
    TelemetryBackground.setArc(0, 360);
    TelemetryBackground.setCapPrecision(180);
    TelemetryBackgroundPainter.setColor(touchgfx::Color::getColorFromRGB(21, 255, 0));
    TelemetryBackground.setPainter(TelemetryBackgroundPainter);
    add(TelemetryBackground);

    TelemetryIcon.setXY(85, 119);
    TelemetryIcon.setBitmap(touchgfx::Bitmap(BITMAP_TELEMETRYBACKGROUND_ID));
    add(TelemetryIcon);
}

TachometerViewBase::~TachometerViewBase()
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void TachometerViewBase::setupScreen()
{

}
