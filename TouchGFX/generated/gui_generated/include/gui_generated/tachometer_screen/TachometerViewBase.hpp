/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef TACHOMETERVIEWBASE_HPP
#define TACHOMETERVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/tachometer_screen/TachometerPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/containers/progress_indicators/ImageProgress.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/clock/DigitalClock.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>

class TachometerViewBase : public touchgfx::View<TachometerPresenter>
{
public:
    TachometerViewBase();
    virtual ~TachometerViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ImageProgress RpmProgress;
    touchgfx::MoveAnimator< touchgfx::Image > RpmBar;
    touchgfx::TextAreaWithOneWildcard RpmVal;
    touchgfx::ImageProgress SocProgress;
    touchgfx::MoveAnimator< touchgfx::Image > SocBar;
    touchgfx::TextAreaWithOneWildcard SocVal;
    touchgfx::TextAreaWithOneWildcard DistanceVal;
    touchgfx::TextAreaWithOneWildcard Pack2Volt;
    touchgfx::TextAreaWithOneWildcard Pack2Temp;
    touchgfx::Image Pack2Icon;
    touchgfx::TextArea Pack2;
    touchgfx::TextAreaWithOneWildcard Pack1Volt;
    touchgfx::TextAreaWithOneWildcard Pack1Temp;
    touchgfx::Image Pack1Icon;
    touchgfx::TextArea Pack1;
    touchgfx::Image DigitalClockBackground;
    touchgfx::DigitalClock DigitalClock;
    touchgfx::Image TargetBackground;
    touchgfx::TextAreaWithOneWildcard TargetSpeed;
    touchgfx::TextAreaWithOneWildcard TargetSoC;
    touchgfx::Image MotorBackground;
    touchgfx::TextAreaWithOneWildcard MotorVal;
    touchgfx::ImageProgress MotorProgress;
    touchgfx::TextAreaWithOneWildcard SpeedVal;
    touchgfx::TextArea MPH;
    touchgfx::Image PackDivider;
    touchgfx::BoxWithBorder OvertakingBackground;
    touchgfx::TextArea Overtaking;
    touchgfx::Circle TelemetryBackground;
    touchgfx::PainterRGB565 TelemetryBackgroundPainter;
    touchgfx::Image TelemetryIcon;

    /*
     * Wildcard Buffers
     */
    static const uint16_t RPMVAL_SIZE = 5;
    touchgfx::Unicode::UnicodeChar RpmValBuffer[RPMVAL_SIZE];
    static const uint16_t SOCVAL_SIZE = 4;
    touchgfx::Unicode::UnicodeChar SocValBuffer[SOCVAL_SIZE];
    static const uint16_t DISTANCEVAL_SIZE = 5;
    touchgfx::Unicode::UnicodeChar DistanceValBuffer[DISTANCEVAL_SIZE];
    static const uint16_t PACK2VOLT_SIZE = 3;
    touchgfx::Unicode::UnicodeChar Pack2VoltBuffer[PACK2VOLT_SIZE];
    static const uint16_t PACK2TEMP_SIZE = 4;
    touchgfx::Unicode::UnicodeChar Pack2TempBuffer[PACK2TEMP_SIZE];
    static const uint16_t PACK1VOLT_SIZE = 3;
    touchgfx::Unicode::UnicodeChar Pack1VoltBuffer[PACK1VOLT_SIZE];
    static const uint16_t PACK1TEMP_SIZE = 4;
    touchgfx::Unicode::UnicodeChar Pack1TempBuffer[PACK1TEMP_SIZE];
    static const uint16_t TARGETSPEED_SIZE = 3;
    touchgfx::Unicode::UnicodeChar TargetSpeedBuffer[TARGETSPEED_SIZE];
    static const uint16_t TARGETSOC_SIZE = 4;
    touchgfx::Unicode::UnicodeChar TargetSoCBuffer[TARGETSOC_SIZE];
    static const uint16_t MOTORVAL_SIZE = 3;
    touchgfx::Unicode::UnicodeChar MotorValBuffer[MOTORVAL_SIZE];
    static const uint16_t SPEEDVAL_SIZE = 3;
    touchgfx::Unicode::UnicodeChar SpeedValBuffer[SPEEDVAL_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

};

#endif // TACHOMETERVIEWBASE_HPP
